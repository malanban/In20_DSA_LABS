#include <iostream>

using namespace std;

struct Node {
    int value;
    Node* left;
    Node* right;
    
    Node(int val) {
        value = val;
        left = NULL;
        right = NULL;
    }
};

class BST {
public:
    BST() {
        root = NULL;
    }

    void insertNode(int value) {
        if (root == NULL) {
            root = new Node(value);
        }
        else {
            _insertNode(value, root);
        }
    }

    void deleteNode(int value) {
        root = _deleteNode(value, root);
    }

    void traverseInOrder() {
        _traverseInOrder(root);
    }

private:
    Node* root;

    void _insertNode(int value, Node* cur_node) {
        if (value < cur_node->value) {
            if (cur_node->left == NULL) {
                cur_node->left = new Node(value);
            }
            else {
                _insertNode(value, cur_node->left);
            }
        }
        else {
            if (cur_node->right == NULL) {
                cur_node->right = new Node(value);
            }
            else {
                _insertNode(value, cur_node->right);
            }
        }
    }

    Node* _deleteNode(int value, Node* cur_node) {
        if (cur_node == NULL) {
            return cur_node;
        }
        else if (value < cur_node->value) {
            cur_node->left = _deleteNode(value, cur_node->left);
        }
        else if (value > cur_node->value) {
            cur_node->right = _deleteNode(value, cur_node->right);
        }
        else {
            if (cur_node->left == NULL) {
                Node* temp = cur_node->right;
                delete cur_node;
                return temp;
            }
            else if (cur_node->right == NULL) {
                Node* temp = cur_node->left;
                delete cur_node;
                return temp;
            }
            else {
                Node* min_right = _findMin(cur_node->right);
                cur_node->value = min_right->value;
                cur_node->right = _deleteNode(min_right->value, cur_node->right);
            }
        }
        return cur_node;
    }

    Node* _findMin(Node* cur_node) {
        while (cur_node->left != NULL) {
            cur_node = cur_node->left;
        }
        return cur_node;
    }

    void _traverseInOrder(Node* cur_node) {
        if (cur_node != NULL) {
            _traverseInOrder(cur_node->left);
            cout << cur_node->value << " ";
            _traverseInOrder(cur_node->right);
        }
    }
};

int main() {
    BST bst;
    int op, val;
    cin >> op >> val;

    while (op != -1) {
        if (op == 1) {
            bst.insertNode(val);
        }
        else if (op == 2) {
            bst.deleteNode(val);
        }
        cin >> op;
        if (op == -1){
            bst.traverseInOrder();
            break;
        }
        cin >> val;
    }


    return 0;
}
